{"version":3,"sources":["webpack:///./src/views/GenerateJavaPojo.vue","webpack:///./src/views/GenerateJavaPojo.vue?ca02"],"names":["_createElementVNode","_createElementBlock","_hoisted_1","_createVNode","_component_router_link","to","$data","_hoisted_2","id","rows","cols","placeholder","readonly","_hoisted_3","onClick","$options","privateAccessType","integerType","doubleType","booleanType","stringType","objectType","listType","mapType","dtoType","classType","javaLineEndSymbol","javaClassFileEndSymbol","javaTabSymbol","singleClassSymbol","betweenWordSymbol","noJavaFieldRegexp","handleStack","replaceSymbol","listFristIndex","name","data","json_schema","java_schema","class_name","methods","clean","this","format","sourceText","JSON","stringify","parse","e","console","log","alert","replace_placeholder","str","params","arguments","length","param","s","k","replace","RegExp","i","generate","jsonSchemaText","jsonSchemaObj","rootType","getJavaClassType","push","className","obj","type","temp","javaSchemaText","packageJavaObject","pop","replaceTempSymbol","includes","packageTypeInfo","field","fieldType","createTypePlaceholder","toString","Array","Object","keys","isMap","innerField","isNaN","Number","test","pushHandleInfo","upperCaseFristElement","text","substring","toUpperCase","createClassName","packageMapTypePlaceholder","packageListTypePlaceholder","analysisFieldInfo","objType","fieldClassName","mapObj","listObj","fristKey","fristValueType","result","__exports__","render"],"mappings":"+IAEIA,eAAwC,SAArC,qCAAiC,G,EAKpCA,eAAI,mB,EAKJA,eAAI,mB,sFAXNC,eAkBM,YAjBJC,EACAF,eAEI,UADFG,eAAsDC,GAAzCC,GAAG,KAAG,C,uBAAC,IAAoB,gBAApB,0B,uBAEtBL,eAA4B,S,qCAAZM,aAAU,I,mBAAVA,gBAChBC,EACAP,eAGM,2BAFJA,eAAgH,Y,qCAA7FM,cAAW,GAAEE,GAAG,cAAcC,KAAK,KAAKC,KAAK,MAAMC,YAAY,oB,mBAA/DL,iBAAW,eAC9BN,eAAyH,Y,qCAAtGM,cAAW,GAAEE,GAAG,cAAcC,KAAK,KAAKC,KAAK,MAAMC,YAAY,mBAAmBC,SAAA,I,mBAAlFN,mBAErBO,EACAb,eAKM,YAHJA,eAAyC,UAAhCc,QAAK,eAAEC,aAAU,UAC1Bf,eAA6C,UAApCc,QAAK,eAAEC,eAAY,YAC5Bf,eAAuC,UAA9Bc,QAAK,eAAEC,YAAS,a,UAgG/B,MAAMC,EAAoB,UAGpBC,EAAc,UACdC,EAAa,SACbC,EAAc,UACdC,EAAa,SACbC,EAAa,SAGbC,EAAW,OACXC,EAAU,MACVC,EAAU,MAGVC,EAAY,qBACZC,EAAoB,IACpBC,EAAyB,MACzBC,EAAgB,OAChBC,EAAoB,OACpBC,EAAoB,IACpBC,EAAoB,8CAG1B,IAAIC,EACAC,EAGJ,MAAMC,EAAiB,EAER,OACbC,KAAM,uBACNC,OACE,MAAO,CACLC,YAAa,GACbC,YAAa,GACbC,WAAY,SAGhBC,QAAS,CAEPC,QACEC,KAAKJ,YAAc,GACnBI,KAAKL,YAAc,IAGrBM,SACE,IACE,MAAMC,EAAaF,KAAKL,YACxBK,KAAKL,YAAcQ,KAAKC,UAAUD,KAAKE,MAAMH,GAAa,KAAM,GAChE,MAAOI,GACPC,QAAQC,IAAIF,GACZG,MAAM,yBAIVC,oBAAqBC,EAAKC,GACxB,GAAyB,IAArBC,UAAUC,OAAc,OAAOD,UAAU,GAC7C,MAAME,EAAQF,UAAU,GACxB,IAAIG,EAAIH,UAAU,GAClB,GAAuB,kBAAXE,EACV,IAAK,MAAME,KAAKF,EAASC,EAAIA,EAAEE,QAAQ,IAAIC,OAAO,MAAQF,EAAI,MAAO,KAAMF,EAAME,SAEjF,IAAK,IAAIG,EAAI,EAAGA,EAAIP,UAAUC,OAAQM,IAAOJ,EAAIA,EAAEE,QAAQ,IAAIC,OAAO,OAASC,EAAI,GAAK,MAAO,KAAMP,UAAUO,IAEjH,OAAOJ,GAGTK,WACE,IACE,MAAMC,EAAiBtB,KAAKL,YACtB4B,EAAgBpB,KAAKE,MAAMiB,GACjChC,EAAc,GACdC,EAAgB,GAChB,MAAMiC,EAAWxB,KAAKyB,iBAAiBF,GACvCjC,EAAYoC,KAAK,CAEfC,UAAW3B,KAAKH,WAChB+B,IAAKL,EACLM,KAAML,IAER,IACIM,EADAC,EAAiB,GAErB,MAAOzC,EAAYwB,OAAS,EAC1BgB,EAAO9B,KAAKgC,kBAAkB1C,EAAY2C,OAC9B,MAARH,IACFC,EAAiBA,EAAiBD,EAAO3C,GAG7Ca,KAAKJ,YAAcI,KAAKkC,kBAAkBH,GAC1C,MAAOzB,GACPC,QAAQC,IAAIF,GACZG,MAAM,yBAIVyB,kBAAmBH,GACjB,MAAOA,EAAeI,SAAS,KAC7BJ,EAAiB/B,KAAKU,oBAAoBqB,EAAgBxC,GAE5D,OAAOwC,GAGTK,gBAAiBT,EAAWU,EAAOC,GACjC,OAAQA,GACN,KAAKxD,EACL,KAAKD,EACL,KAAKD,EACH,OAAOoB,KAAKuC,sBAAsBZ,EAAYU,EAAQC,GACxD,QACE,OAAOA,IAIbb,iBAAkBG,GAChB,GAAqB,kBAATA,EACV,OAAOlD,EACF,GAAqB,mBAATkD,EACjB,OAAOnD,EACF,GAAqB,kBAATmD,EACjB,OAAIA,EAAIY,WAAWL,SAAS,KACnB3D,EAEAD,EAEJ,GAAIqD,aAAea,MACxB,OAAO7D,EACF,GAAW,MAAPgD,GAA2C,IAA5Bc,OAAOC,KAAKf,GAAKd,OACzC,OAAOnC,EACF,CACL,IAAIiE,GAAQ,EACZ,IAAK,MAAMC,KAAcjB,EAAK,CAC5B,IAAKkB,MAAMC,OAAOF,IAAc,CAC9BD,GAAQ,EACR,MAEF,GAAIvD,EAAkB2D,KAAKH,GAAa,CACtCD,GAAQ,EACR,OAGJ,OAAOA,EAAQ/D,EAAUC,IAI7ByD,sBAAuBtE,GACrB,MAAO,IAAMA,EAAc,KAG7BgF,eAAgBtB,EAAWC,EAAKC,GAC9BvC,EAAYoC,KAAK,CACfC,UAAWA,EACXC,IAAKA,EACLC,KAAMA,KAIVqB,sBAAuBC,GACrB,OAAOA,EAAKC,UAAU,EAAG,GAAGC,cAAgBF,EAAKC,UAAU,IAG7DE,gBAAiB3B,EAAWU,GAC1B,OAAc,IAAVA,EAEKV,EAAY,OAEZ3B,KAAKkD,sBAAsBb,IAItCkB,0BAA2BtF,GACzB,MAAO,eAAiBA,EAAc,KAGxCuF,2BAA4BvF,GAC1B,MAAO,QAAUA,EAAc,KAGjCwF,kBAAmB9B,EAAWC,EAAKS,EAAOC,EAAWoB,GACnD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,OAAQzB,GACN,KAAKxD,EACH6E,EAAiB3D,KAAKsD,gBAAgB3B,EAAWU,GAASC,EAC1D/C,EAAcoC,EAAYU,EAAQC,GAAaqB,EAC/C3D,KAAKiD,eAAeU,EAAgB/B,EAAIS,GAAQC,GAChD,MACF,KAAKzD,EACH8E,EAAiB3D,KAAKsD,gBAAgB3B,EAAWU,GAASC,EAC1DsB,EAAShC,EAAIS,GACbyB,EAAWpB,OAAOC,KAAKiB,GAAQ,GAC/BG,EAAiB/D,KAAKyB,iBAAiBmC,EAAOE,IAC9CvE,EAAcoC,EAAYU,EAAQC,GAAatC,KAAKuD,0BAA0BvD,KAAKuC,sBAAsBoB,EAAiBG,EAAWC,IACrI/D,KAAKiD,eAAeU,EAAgBC,EAAQtB,GAC5C,MACF,KAAK1D,EACH+E,EAAiB3D,KAAKsD,gBAAgB3B,EAAWU,GAASC,EAC1DuB,EAAUjC,EAAIS,GACd0B,EAAiB/D,KAAKyB,iBAAiBoC,EAAQrE,IAC/CD,EAAcoC,EAAYU,EAAQC,GAAatC,KAAKwD,2BAA2BxD,KAAKuC,sBAAsBoB,EAAiBnE,EAAiBuE,IAC5I/D,KAAKiD,eAAeU,EAAgBE,EAASvB,GAC7C,MACF,QACMoB,IAAY7E,GAAW6E,IAAY9E,IACrCW,EAAcoC,EAAYU,EAAQC,GAAaA,GAEjD,QAINN,mBAAmB,UAAEL,EAAS,IAAEC,EAAG,KAAEC,IACnC,IACIS,EACAwB,EACAC,EAHAC,EAAShE,KAAKU,oBAAoB3B,EAAW4C,GAIjD,OAAQE,GACN,KAAK/C,EACH,IAAK,MAAMuD,KAAST,EAClBU,EAAYtC,KAAKyB,iBAAiBG,EAAIS,IACtC2B,EAASA,EAAS7E,EAAoBD,EAAgBZ,EAAoBc,EAAoBY,KAAKoC,gBAAgBT,EAAWU,EAAOC,GAAalD,EAAoBiD,EAAQrD,EAC9KgB,KAAKyD,kBAAkB9B,EAAWC,EAAKS,EAAOC,EAAWT,GAE3D,OAAOmC,EAAS/E,EAClB,KAAKJ,EAKH,OAHAiF,EAAWpB,OAAOC,KAAKf,GAAK,GAC5BmC,EAAiB/D,KAAKyB,iBAAiBG,EAAIkC,IAC3C9D,KAAKyD,kBAAkB9B,EAAWC,EAAKkC,EAAUC,EAAgBlC,GAC1D,KACT,KAAKjD,EAIH,OAFAmF,EAAiB/D,KAAKyB,iBAAiBG,EAAIpC,IAC3CQ,KAAKyD,kBAAkB9B,EAAWC,EAAKpC,EAAgBuE,EAAgBlC,GAChE,S,qBCxVjB,MAAMoC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD","file":"js/chunk-2d21d0df.cd9b9ecb.js","sourcesContent":["<template>\n  <div>\n    <p>Generate Java POJO File From Json</p>\n    <p>\n      <router-link to=\"/\">back to the contents</router-link>\n    </p>\n    <input v-model=\"class_name\">\n    <br>\n    <div>\n      <textarea v-model=\"json_schema\" id=\"json_schema\" rows=\"50\" cols=\"100\" placeholder=\"json schema area\"></textarea>\n      <textarea v-model=\"java_schema\" id=\"java_schema\" rows=\"50\" cols=\"100\" placeholder=\"java schema area\" readonly></textarea>\n    </div>\n    <br>\n    <div>\n      <!-- button -->\n      <button @click=\"format()\">format</button>\n      <button @click=\"generate()\">generate</button>\n      <button @click=\"clean()\">clean</button>\n    </div>\n  </div>\n</template>\n\n<script>\n/*\njson example\n    base java type\n        {\n            \"name\": \"fjh\",\n            \"age\": 18,\n            \"score\": 99.9,\n            \"isSuccess\": true,\n            \"testNull\": null\n        }\n    dto java type\n        {\n            \"name\": \"fjh\",\n            \"profile\": {\n                \"profileId\": \"abc123\",\n                \"profileDetail\": {\n                    \"detailId\": 123,\n                    \"content\": \"bbb\"\n                }\n            }\n        }\n    map java type\n        {\n            \"name\": \"fjh\",\n            \"simpleMap\": {\n                \"id1\": 1,\n                \"id2\": 2\n            },\n            \"mapAndDto\": {\n                \"dto1\": {\n                    \"name\": \"fjh\",\n                    \"age\": 1\n                }\n            },\n            \"mapAndMap\": {\n                \"map1\": {\n                    \"name1\": \"fjh\"\n                }\n            },\n            \"mapAndMapAndDto\": {\n                \"map1\": {\n                    \"name1\": {\n                        \"name\": \"fjh\",\n                        \"age\": 1\n                    }\n                }\n            }\n        }\n    list java type\n        {\n            \"name\": \"fjh\",\n            \"intList\": [\n                1,\n                2\n            ],\n            \"objList\": [\n                {\n                    \"name\": \"fjh\",\n                    \"dtoList\": [\n                        \"1\"\n                    ]\n                }\n            ],\n            \"mapList\": [\n                {\n                    \"id1\": 1\n                }\n            ],\n            \"mapObjList\": [\n                {\n                    \"id1\": {\n                        \"name\": \"fjh\",\n                        \"age\": 18\n                    }\n                }\n            ],\n            \"mapObjListList\": [\n                [\n                    {\n                        \"id2\": {\n                            \"name\": \"fjh\",\n                            \"address\": 18\n                        }\n                    }\n                ]\n            ]\n        }\n*/\n\n// Java Access Type\nconst privateAccessType = 'private'\n\n// Java Type\nconst integerType = 'Integer'\nconst doubleType = 'Double'\nconst booleanType = 'Boolean'\nconst stringType = 'String'\nconst objectType = 'Object'\n\n// have specify handle type\nconst listType = 'List'\nconst mapType = 'Map'\nconst dtoType = 'Dto'\n\n// Java Class Constant Area\nconst classType = 'public class %0% {'\nconst javaLineEndSymbol = ';'\nconst javaClassFileEndSymbol = '\\n}'\nconst javaTabSymbol = '    '\nconst singleClassSymbol = '\\n\\n'\nconst betweenWordSymbol = ' '\nconst noJavaFieldRegexp = /^(([a-z]+[0-9]+)|([0-9]+[a-z]+))[a-z0-9]*$/i\n\n// global var\nlet handleStack\nlet replaceSymbol\n\n// temp constant\nconst listFristIndex = 0\n\nexport default {\n  name: 'GenerateJavaPojoView',\n  data () {\n    return {\n      json_schema: '',\n      java_schema: '',\n      class_name: 'Root'\n    }\n  },\n  methods: {\n    // clean record\n    clean () {\n      this.java_schema = ''\n      this.json_schema = ''\n    },\n    // format json\n    format () {\n      try {\n        const sourceText = this.json_schema\n        this.json_schema = JSON.stringify(JSON.parse(sourceText), null, 4)\n      } catch (e) {\n        console.log(e)\n        alert('illegal json schema')\n      }\n    },\n    // replace placeholder function\n    replace_placeholder (str, params) {\n      if (arguments.length === 1) return arguments[0]\n      const param = arguments[1]\n      let s = arguments[0]\n      if (typeof (param) === 'object') {\n        for (const k in param) { s = s.replace(new RegExp('\\\\%' + k + '\\\\%', 'g'), param[k]) }\n      } else {\n        for (let i = 1; i < arguments.length; i++) { s = s.replace(new RegExp('\\\\%' + (i - 1) + '\\\\%', 'g'), arguments[i]) }\n      }\n      return s\n    },\n    // generate function\n    generate () {\n      try {\n        const jsonSchemaText = this.json_schema\n        const jsonSchemaObj = JSON.parse(jsonSchemaText)\n        handleStack = []\n        replaceSymbol = {}\n        const rootType = this.getJavaClassType(jsonSchemaObj)\n        handleStack.push({\n          // default parent class name\n          className: this.class_name,\n          obj: jsonSchemaObj,\n          type: rootType\n        })\n        let javaSchemaText = ''\n        let temp\n        while (handleStack.length > 0) {\n          temp = this.packageJavaObject(handleStack.pop())\n          if (temp != null) {\n            javaSchemaText = javaSchemaText + temp + singleClassSymbol\n          }\n        }\n        this.java_schema = this.replaceTempSymbol(javaSchemaText)\n      } catch (e) {\n        console.log(e)\n        alert('illegal json schema')\n      }\n    },\n    // replace temp symbol\n    replaceTempSymbol (javaSchemaText) {\n      while (javaSchemaText.includes('%')) {\n        javaSchemaText = this.replace_placeholder(javaSchemaText, replaceSymbol)\n      }\n      return javaSchemaText\n    },\n    // package type info\n    packageTypeInfo (className, field, fieldType) {\n      switch (fieldType) {\n        case dtoType:\n        case mapType:\n        case listType:\n          return this.createTypePlaceholder(className + field + fieldType)\n        default:\n          return fieldType\n      }\n    },\n    // get java class type\n    getJavaClassType (obj) {\n      if (typeof (obj) === 'string') {\n        return stringType\n      } else if (typeof (obj) === 'boolean') {\n        return booleanType\n      } else if (typeof (obj) === 'number') {\n        if (obj.toString().includes('.')) {\n          return doubleType\n        } else {\n          return integerType\n        }\n      } else if (obj instanceof Array) {\n        return listType\n      } else if (obj == null || Object.keys(obj).length === 0) {\n        return objectType\n      } else {\n        let isMap = false\n        for (const innerField in obj) {\n          if (!isNaN(Number(innerField))) {\n            isMap = true\n            break\n          }\n          if (noJavaFieldRegexp.test(innerField)) {\n            isMap = true\n            break\n          }\n        }\n        return isMap ? mapType : dtoType\n      }\n    },\n    // create type placeholder\n    createTypePlaceholder (placeholder) {\n      return '%' + placeholder + '%'\n    },\n    // push handle info\n    pushHandleInfo (className, obj, type) {\n      handleStack.push({\n        className: className,\n        obj: obj,\n        type: type\n      })\n    },\n    // uppercase frist element\n    upperCaseFristElement (text) {\n      return text.substring(0, 1).toUpperCase() + text.substring(1)\n    },\n    // create class name\n    createClassName (className, field) {\n      if (field === 0) {\n        // list item class name\n        return className + 'Item'\n      } else {\n        return this.upperCaseFristElement(field)\n      }\n    },\n    // package map type placeholder\n    packageMapTypePlaceholder (placeholder) {\n      return 'Map<String, ' + placeholder + '>'\n    },\n    // package list type placeholder\n    packageListTypePlaceholder (placeholder) {\n      return 'List<' + placeholder + '>'\n    },\n    // analysis field info\n    analysisFieldInfo (className, obj, field, fieldType, objType) {\n      let fieldClassName\n      let mapObj\n      let listObj\n      let fristKey\n      let fristValueType\n      switch (fieldType) {\n        case dtoType:\n          fieldClassName = this.createClassName(className, field) + fieldType\n          replaceSymbol[className + field + fieldType] = fieldClassName\n          this.pushHandleInfo(fieldClassName, obj[field], fieldType)\n          break\n        case mapType:\n          fieldClassName = this.createClassName(className, field) + fieldType\n          mapObj = obj[field]\n          fristKey = Object.keys(mapObj)[0]\n          fristValueType = this.getJavaClassType(mapObj[fristKey])\n          replaceSymbol[className + field + fieldType] = this.packageMapTypePlaceholder(this.createTypePlaceholder(fieldClassName + fristKey + fristValueType))\n          this.pushHandleInfo(fieldClassName, mapObj, fieldType)\n          break\n        case listType:\n          fieldClassName = this.createClassName(className, field) + fieldType\n          listObj = obj[field]\n          fristValueType = this.getJavaClassType(listObj[listFristIndex])\n          replaceSymbol[className + field + fieldType] = this.packageListTypePlaceholder(this.createTypePlaceholder(fieldClassName + listFristIndex + fristValueType))\n          this.pushHandleInfo(fieldClassName, listObj, fieldType)\n          break\n        default:\n          if (objType === mapType || objType === listType) {\n            replaceSymbol[className + field + fieldType] = fieldType\n          }\n          break\n      }\n    },\n    // package java object\n    packageJavaObject ({ className, obj, type }) {\n      let result = this.replace_placeholder(classType, className)\n      let fieldType\n      let fristKey\n      let fristValueType\n      switch (type) {\n        case dtoType:\n          for (const field in obj) {\n            fieldType = this.getJavaClassType(obj[field])\n            result = result + singleClassSymbol + javaTabSymbol + privateAccessType + betweenWordSymbol + this.packageTypeInfo(className, field, fieldType) + betweenWordSymbol + field + javaLineEndSymbol\n            this.analysisFieldInfo(className, obj, field, fieldType, type)\n          }\n          return result + javaClassFileEndSymbol\n        case mapType:\n          // only get frist k-v\n          fristKey = Object.keys(obj)[0]\n          fristValueType = this.getJavaClassType(obj[fristKey])\n          this.analysisFieldInfo(className, obj, fristKey, fristValueType, type)\n          return null\n        case listType:\n          // only get frist element\n          fristValueType = this.getJavaClassType(obj[listFristIndex])\n          this.analysisFieldInfo(className, obj, listFristIndex, fristValueType, type)\n          return null\n      }\n    }\n  }\n}\n</script>\n","import { render } from \"./GenerateJavaPojo.vue?vue&type=template&id=fe372b52\"\nimport script from \"./GenerateJavaPojo.vue?vue&type=script&lang=js\"\nexport * from \"./GenerateJavaPojo.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/fjh/template/template-utils/web-tools/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}